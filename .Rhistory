title = "Fig 7 - SD in Rydberg Values by Color",
x = "Color of Spectra",
y = "Sample SD (1/m)"
)
ggplot(balmer_data, mapping = aes(x = color, y = R, color = color))+
geom_boxplot()+
scale_color_manual(values = c("red" = "red", "cyan" = "cyan", "violet" = "violet"))+
geom_hline(yintercept = r_val, color = "green", linetype = "dashed", size = 1)+
guides(color = FALSE)+
labs(
title = "Fig 6B - Box Plot of Rydberg Values by Spectra Color",
x = "Color of Spectral Line",
y = "Rydberg Constant Value (1 / m)",
subtitle = "Note: Green Dashed Line represents actual value"
)
balmer_data |>
mutate(dif = r_val - R ) |>
ggplot(mapping = aes(y = color, x = dif, color = color))+
geom_point()+
geom_vline(xintercept = 0, color = "green", size = 1)+
scale_color_manual(values = c("red" = "red", "cyan" = "cyan", "violet" = "violet"))+
scale_x_continuous(labels = label_number())+
guides(color = FALSE)+
labs(
title = "Fig 8A - Deviations from Actual Rydberg Value by Color",
subtitle = "Note: Green Line Represents Actual Rydberg Value",
x = "Deviation from Actual Rydberg Value (1/m)",
y = "Color of Spectra Line "
)
#Wavelengths
data <- Balmer_Data |>
mutate(
theta_rad = theta * pi / 180,
theta_rad = signif(theta_rad, digits = 5)
)
data$theta_rad <-signif(data$theta_rad, digits = 5)
data$spacing = 1.6666666666666667e-06
data$lambda <- data$spacing * sin(data$theta_rad)
data$lambda <- signif(data$lambda,  digits = 5)
#Rydberg Values
red_df <- data |>
filter(color %in% c("red"))
cyan_df <- data |>
filter(color %in% c("cyan"))
violet_df <- data |>
filter(color %in% c("violet"))
red_df <- red_df |>
mutate(
R = (36/5) * (1 / lambda)
)
cyan_df <- cyan_df |>
mutate(
R = (16/3) * (1 / lambda)
)
violet_df <- violet_df |>
mutate(
R = 4.7619 * (1 / lambda)
)
balmer_data <- rbind(red_df, cyan_df, violet_df)
r_val <- 10973731.6
balmer_data$R <- signif(data$R, digits = 5)
balmer_data$theta_rad <- signif(data$theta_rad, digits = 5)
#Mean and Standard Dev of Rydberg Values
balmer_stats <- balmer_data |>
summarise(
avg = mean(R, na.rm = TRUE),
std_dev = sd(R, na.rm = TRUE)
)
balmer_stats
calculate_percent_error <- function(experimental, theoretical) {
percent_error <- (experimental - theoretical) / theoretical * 100
return(percent_error)
}
e <- 10950180
t <- r_val
balmer_error <- calculate_percent_error(e,t)
balmer_error
r_exp_vals <- balmer_data |>
select(R)
r_exp_mu <- 10951388
r_exp_sd <- 88578.43
t.test(r_exp_vals, mu = r_val)
balmer_data <- balmer_data|>
mutate(
color = case_when(
color == "cyan" ~ "1red",
color == "red" ~ "2violet",
color == "violet" ~ "3cyan",
TRUE ~ color  # This keeps any other values unchanged
)
)
balmer_data <- balmer_data |>
mutate(
color = case_when(
color == "1red" ~ "red",
color == "2violet" ~ "violet",
color == "3cyan" ~ "cyan",
TRUE ~ color  # This keeps any other values unchanged
)
)
lab_data <- balmer_data |>
select(color, left_angle, right_angle, vernier, theta, theta_rad, lambda, R) |>
rename(
Color = color,
`Left Angle` = left_angle,
`Right Angle` = right_angle,
`Vernier` = vernier,
`Theta (deg)` = theta,
`Theta (rad)` = theta_rad,
`Lambda (m)` = lambda,
`Rydberg (1/m)` = R
)
balmer_data |>
mutate(dif = R - r_val ) |>
ggplot(mapping = aes(y = color, x = dif, color = color))+
geom_point()+
geom_vline(xintercept = 0, color = "green", size = 1)+
scale_color_manual(values = c("red" = "red", "cyan" = "cyan", "violet" = "violet"))+
scale_x_continuous(labels = label_number())+
guides(color = FALSE)+
labs(
title = "Fig 8A - Deviations from Actual Rydberg Value by Color",
subtitle = "Note: Green Line Represents Actual Rydberg Value",
x = "Deviation from Actual Rydberg Value (1/m)",
y = "Color of Spectra Line "
)
angle_data <- balmer_data |>
select(color, vernier, theta, R)
angle_data <- balmer_data |>
select(color, vernier, theta, R)
angle_data
angle_data <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2)
angle_data
angle_data <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2) |>
mutate(theta = 180 - theta)
angle_data
angle_data_1 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 1)
angle_data_2 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2) |>
mutate(theta = 180 - theta)
angle_data_1 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 1)
angle_data <- rbind(angle_data_1, angle_data_2)
angle_data
ggplot(angle_data, mapping = aes(y = vernier, x = theta))+
geom_point()+
facet_wrap(~color)
View(angle_data)
angle_data_2 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2) |>
mutate(theta = 180 - theta)
angle_data_1 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 1)
angle_data <- rbind(angle_data_1, angle_data_2)
angle_data
ggplot(angle_data, mapping = aes(y = vernier, x = theta))+
geom_boxplot()+
facet_wrap(~color)
ggplot(angle_data, mapping = aes(y = theta, x = color))+
geom_boxplot()+
facet_wrap(~vernier)
angle_red <- angle_data |>
filter(color %in% "red")
angle_cyan <- angle_data |>
filter(color %in% "cyan")
angle_violet <- angle_data |>
filter(color %in% "violet")
angle_data_2 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2) |>
mutate(theta = 180 - theta)
angle_data_1 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 1)
angle_data <- rbind(angle_data_1, angle_data_2)
angle_red <- angle_data |>
filter(color %in% "red")
angle_cyan <- angle_data |>
filter(color %in% "cyan")
angle_violet <- angle_data |>
filter(color %in% "violet")
ggplot(angle_red, mapping = aes(y = theta, x = vernier))+
geom_boxplot()
angle_data_2 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2) |>
mutate(theta = 180 - theta)
angle_data_1 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 1)
angle_data <- rbind(angle_data_1, angle_data_2)
angle_red <- angle_data |>
filter(color %in% "red")
angle_cyan <- angle_data |>
filter(color %in% "cyan")
angle_violet <- angle_data |>
filter(color %in% "violet")
ggplot(angle_red, mapping = aes(y = theta))+
geom_boxplot(~vernier)
ggplot(angle_red, mapping = aes(y = theta, x = vernier))+
geom_boxplot(~vernier)
ggplot(angle_red, mapping = aes(y = theta, x = vernier))+
geom_boxplot()+
facet_wrap(~vernier)
ggplot(angle_red, mapping = aes(y = theta, x = vernier))+
geom_point()
ggplot(angle_red, mapping = aes(y = theta, x = vernier))+
scale_x_manual(breaks = c(1,2))+
geom_point()
ggplot(angle_red, mapping = aes(y = theta, x = vernier))+
geom_point()+
scale_x_continuous(breaks = c(1,2))
angle_data_2 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 2) |>
mutate(theta = 180 - theta)
angle_data_1 <- balmer_data |>
select(color, vernier, theta, R) |>
filter(vernier %in% 1)
angle_data <- rbind(angle_data_1, angle_data_2)
angle_red <- angle_data |>
filter(color %in% "red")
angle_cyan <- angle_data |>
filter(color %in% "cyan")
angle_violet <- angle_data |>
filter(color %in% "violet")
ggplot(angle_red, mapping = aes(y = theta, color = vernier)+
geom_point()+
ggplot(angle_red, mapping = aes(y = theta, color = vernier)+
geom_point()
results <- angle_data |>
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
avg_theta_vernier1 = mean(theta[vernier == 1], na.rm = TRUE),
avg_theta_vernier2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(avg_theta_vernier1 - avg_theta_vernier2) /
((avg_theta_vernier1 + avg_theta_vernier2) / 2)
) |>
# Select only the necessary columns to display
select(color, percent_difference)
print(results)
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
avg_theta_vernier1 = mean(theta[vernier == 1], na.rm = TRUE),
avg_theta_vernier2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(avg_theta_vernier1 - avg_theta_vernier2) /
((avg_theta_vernier1 + avg_theta_vernier2) / 2)
)
print(results)
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
theta_1 = mean(theta[vernier == 1], na.rm = TRUE),
theta_2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(avg_theta_vernier1 - avg_theta_vernier2) /
((avg_theta_vernier1 + avg_theta_vernier2) / 2)
)
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
theta_1 = mean(theta[vernier == 1], na.rm = TRUE),
theta_2 = mean(theta[vernier == 2], na.rm = TRUE)
)
results
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
theta_1 = mean(theta[vernier == 1], na.rm = TRUE),
theta_2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(theta_1 - theta_2) /
((theta_1 + theta_2) / 2)
)
results
results$percent_difference =  signif(results$percent_difference,  digits = 5)
results
results <- results |>
rename(
`Color` = color,
`Mean Theta Vernier 1` = theta_1,
`Mean Theta Vernier 2` = theta_2,
`% Difference`= percent_difference
)
results
results <- results |>
rename(
`Color` = color,
`Mean Vernier 1` = theta_1,
`Mean Vernier 2` = theta_2,
`% Difference`= percent_difference
)
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
theta_1 = mean(theta[vernier == 1], na.rm = TRUE),
theta_2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(theta_1 - theta_2) /
((theta_1 + theta_2) / 2)
)
results$percent_difference =  signif(results$percent_difference,  digits = 5)
results <- results |>
rename(
`Color` = color,
`Mean Vernier 1` = theta_1,
`Mean Vernier 2` = theta_2,
`% Difference`= percent_difference
)
results
View(results)
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
theta_1 = mean(theta[vernier == 1], na.rm = TRUE),
theta_2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(theta_1 - theta_2) /
((theta_1 + theta_2) / 2)
)
results$percent_difference =  signif(results$percent_difference,  digits = 5)
test_results <- angle_data %>%
group_by(color) %>%
summarise(
t_statistic = t.test(theta[vernier == 1], theta[vernier == 2])$statistic,
p_value = t.test(theta[vernier == 1], theta[vernier == 2])$p.value
)
# Print the results
print(test_results)
angle_data <- rbind(angle_data_1, angle_data_2)
averages <- angle_data %>%
group_by(color, vernier) %>%
summarise(
avg_theta = mean(theta, na.rm = TRUE),
avg_R = mean(R, na.rm = TRUE)
)
# Spread the data for easy comparison between vernier = 1 and vernier = 2
averages_spread <- averages %>%
pivot_wider(
names_from = vernier,
values_from = c(avg_theta, avg_R),
names_prefix = "vernier_"
)
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
angle_data <- rbind(angle_data_1, angle_data_2)
# Assuming your data frame is named angle_data
# Group by color and vernier, then calculate the average of theta and R
averages <- angle_data %>%
group_by(color, vernier) %>%
summarise(
avg_theta = mean(theta, na.rm = TRUE),
avg_R = mean(R, na.rm = TRUE),
.groups = "drop"  # Drop grouping, or use 'keep' if you want to keep the grouping
)
# Spread the data for easy comparison between vernier = 1 and vernier = 2
averages_spread <- averages %>%
pivot_wider(
names_from = vernier,
values_from = c(avg_theta, avg_R),
names_prefix = "vernier_"
)
# Calculate the percent difference for each color
results <- averages_spread %>%
mutate(
percent_diff_theta = 100 * (vernier_2_avg_theta - vernier_1_avg_theta) / ((vernier_2_avg_theta + vernier_1_avg_theta) / 2),
percent_diff_R = 100 * (vernier_2_avg_R - vernier_1_avg_R) / ((vernier_2_avg_R + vernier_1_avg_R) / 2)
)
angle_data <- rbind(angle_data_1, angle_data_2)
library(dplyr)
library(tidyr)
# Assuming your data frame is named angle_data
# Group by color and vernier, then calculate the average of theta and R
averages <- angle_data %>%
group_by(color, vernier) %>%
summarise(
avg_theta = mean(theta, na.rm = TRUE),
avg_R = mean(R, na.rm = TRUE),
.groups = "drop"  # Drop grouping, or use 'keep' if you want to keep the grouping
)
# Spread the data for easy comparison between vernier = 1 and vernier = 2, filling missing with NA
averages_spread <- averages %>%
pivot_wider(
names_from = vernier,
values_from = c(avg_theta, avg_R),
names_prefix = "vernier_",
values_fill = list(avg_theta = NA, avg_R = NA)  # Fill missing entries with NA
)
# Calculate the percent difference for each color, handling NA values appropriately
results <- averages_spread %>%
mutate(
percent_diff_theta = if_else(
is.na(vernier_1_avg_theta) | is.na(vernier_2_avg_theta),
NA_real_,
100 * (vernier_2_avg_theta - vernier_1_avg_theta) / ((vernier_2_avg_theta + vernier_1_avg_theta) / 2)
),
percent_diff_R = if_else(
is.na(vernier_1_avg_R) | is.na(vernier_2_avg_R),
NA_real_,
100 * (vernier_2_avg_R - vernier_1_avg_R) / ((vernier_2_avg_R + vernier_1_avg_R) / 2)
)
)
result_data <- angle_data %>%
group_by(color) %>%
summarize(
avg_R_vernier1 = mean(R[vernier == 1], na.rm = TRUE),
avg_R_vernier2 = mean(R[vernier == 2], na.rm = TRUE),
percent_difference = (avg_R_vernier2 - avg_R_vernier1) / avg_R_vernier1 * 100
)
# View the resulting data frame
print(result_data)
result_R <- result_data |>
rename(
`Mean R Vern 1` = avg_R_vernier1,
`Mean R Vern 2` = avg_R_vernier2,
`% Differnece` = percent_difference
)
View(result_R)
results <- results |>
rename(
`Color` = color,
`Mean Theta Vern1` = theta_1,
`Mean Theta Vern2` = theta_2,
`% Difference`= percent_difference
)
results
View(results)
results <- results |>
rename(
`Color` = color,
`Mean Theta Vern 1` = theta_1,
`Mean Theta Vern 2` = theta_2,
`% Difference`= percent_difference
)
results <- angle_data |>
# Group by color
group_by(color) |>
# Calculate the average theta for vernier = 1 and vernier = 2
summarise(
theta_1 = mean(theta[vernier == 1], na.rm = TRUE),
theta_2 = mean(theta[vernier == 2], na.rm = TRUE)
) |>
# Calculate percent difference between the two averages
mutate(
percent_difference = 100 * abs(theta_1 - theta_2) /
((theta_1 + theta_2) / 2)
)
results$percent_difference =  signif(results$percent_difference,  digits = 5)
results <- results |>
rename(
`Color` = color,
`Mean Theta Vern 1` = theta_1,
`Mean Theta Vern 2` = theta_2,
`% Difference`= percent_difference
)
result_data <- angle_data %>%
group_by(color) %>%
summarize(
avg_R_vernier1 = mean(R[vernier == 1], na.rm = TRUE),
avg_R_vernier2 = mean(R[vernier == 2], na.rm = TRUE),
percent_difference = (avg_R_vernier2 - avg_R_vernier1) / avg_R_vernier1 * 100
)
# View the resulting data frame
result_R <- result_data |>
rename(
`Mean R Vern 1` = avg_R_vernier1,
`Mean R Vern 2` = avg_R_vernier2,
`% Difference` = percent_difference
)
